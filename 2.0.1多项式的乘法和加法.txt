设计函数分别求两个一元多项式的乘积与和。

输入格式:
输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。

输出格式:
输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出0 0。

#include<iostream>
using namespace std;
int main()
{  //定义正常多项式表示索引i为指数，a[i]为系数
		int j, h[10000] = { 0 }, h1[10000] = { 0 }, m1[10000] = { 0 }, m[10000] = { 0 }, k = 0, k1 = 0, t1[2000] = { 0 }, t[2000] = { 0 };
		int  n, m3, a[10000] = { 0 }, a1[10000] = { 0 }, b[10000] = { 0 }, b1[10000] = { 0 }, c[10000] = { 0 }, c1[10000] = { 0 }, d[10000] = { 0 }, d1[2000] = { 0 }, i;
		cin >> n;//n和m3是两个多项式非0项的个数
		for (i = 0; i < n; i++)
		{
			cin >> a[i] >> a1[i];  //a存储非零项系数，a1存储非0项指数
			d[a1[i]] += a[i];//d为加法结果的正常多项式，这里直接把加法算了
		}
		cin >> m3;
		for (i = 0; i < m3; i++)
		{
			cin >> b[i] >> b1[i];//b存储非零项系数，b1存储非0项指数
			d[b1[i]] += b[i];
		}
		k = 0;
		//下面循环实现多项式乘法，特点是不管指数是否相等，都要乘一遍
		for (i = 0; i < n; i++)
		{
			for (j = 0; j < m3; j++)//不可以此处写k++；
			{
				c[k] = a[i] * b[j];  //c存储乘完后多项式的系数，c1存储指数
				c1[k] = a1[i] + b1[j];//多项式相乘，系数相乘，指数相加；
				h[c1[k]] += c[k]; //h是乘完后的多项式的正常式
				k++;
			}
		}
		k1 = 0;
		for (i = 2000; i >= 0; i--)//把h中的0项去掉
		{
			if (h[i] != 0)
			{
				m[k1] = h[i];//m数组用来储存乘法运算结果的系数；
				m1[k1] = i;//m1来储存乘法运算结果后的指数；
				k1++;
			}
		}
		for (i = 0; i < k1; i++)
		{
			cout << m[i] << " " << m1[i];
			if (i < k1 - 1) cout << " ";
		}
		if (k1 == 0)
		{
			cout << "0 0";//输出零多项式；
		}
		cout << endl;
		k = 0;
		for (i = 2000; i >= 0; i--)
		{
			if (d[i] != 0)
			{
				t[k] = d[i];//t是加法多项式系数，t1为指数
				t1[k] = i;
				k++;
			}
		}
		for (i = 0; i < k; i++)
		{
			cout << t[i] << " " << t1[i];
			if (i < k - 1) cout << " ";
		}
		if (k == 0) cout << "0 0";//有零多项式；
		return 0;
}
