求给定序列的最大子列，输出最大和以及头尾元素的值
	#include<iostream> 
	using namespace std;
	int main() //-10 1 2 3 4 -5 -23 3 7 -21
	{
		int n;
		int a[100001];
		cin >> n;
		for (int i = 0; i < n; i++)
			cin >> a[i];
		int this_sum = 0, max_sum = 0;
		int max_start = 0, max_end = n-1;  //最大子列头尾元素的位置
		int count = 0,max_count=0; //max_count表示最大子列运算个数（循环中加了几次）
		int flag = 0;
		for (int i=0;i<n;i++)
			if (a[i] >= 0) flag = 1;
		for (int i = 0; i < n; i++)
		{
			this_sum += a[i];
			count++;
			if (this_sum > max_sum)
			{
				max_sum = this_sum;
				max_count = count;//因为最大子列的最后一步都在这个if中产生，所以把max（结果）项都在这里进行更新
				max_end = i;
			}
			else if (this_sum < 0)
			{
				this_sum = 0;
				count = 0;//重新来的话就清空加的次数
			}
		}
		if (max_sum != 0)  //正常情况
		{
			max_start = max_end - max_count + 1;
			cout << max_sum << " " << a[max_start] << " " << a[max_end];
		}
		else
			if(flag==0) //都是负数的情况
				cout << max_sum << " "<< a[0] << " " << a[n - 1];
			else//有负数和0的情况
				cout << 0 << " " << 0 << " " << 0;
		return 0;
	}