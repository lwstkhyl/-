后缀表达式：运算符号位于两个运算数之后
如62/3-42*+ 
先读取两个数6 2，碰到了/，就是6/2，变成33-42*+
再读取两个数3 3，碰到了-，就是3-3，变成042*+
对于有3个数的情况，先读取*号，前面的两个数为4 2，就是4*2，变成08+
就是0+8=8

求值策略：从左向右扫描，逐个处理运算数和运算符号，这时需要一种存储方法，能顺序存储运算数，并在需要时倒序输出，即先存进去的后出来->这个结构可以看出一个开口朝上的容器，把数字放入这个容器中，拿出来就是先进后出

堆栈：具有一定操作约束的线性表，只在一端（开口端，即栈顶）做插入删除
插入数据：入栈（push），删除数据：出栈（pop），特点是后入先出
通过push和pop的交替进行，在入栈顺序一定的情况下，可以有多种出栈顺序，如以ABC的顺序入栈，可以有CBA、ACB等出栈顺序，但不可能是CAB这样出栈，因为C最后入栈且第一个出栈，说明C出栈时AB一定在栈内，不能让A先出

顺序存储实现：通常由一个一维数组和一个记录栈顶元素位置的变量top组成，top为0，表示只有一个元素，top为-1表示栈空
可以利用一个数组实现两个堆栈，最大利用数组空间。使数组只要有空间入栈操作就可以成功：把数组的头和尾作为起点开始放元素，当两个栈的栈顶指针相遇时就表示两个栈满了。比如有一个int a[n],栈顶指针分别尾top1\top2,当top1=-1且top2=n时表示两个栈都为空，当top2-top1=1时堆栈满

应用：后缀表达式的求值
1、运算数：入栈
2、运算符：从栈中弹出适当数量的运算数，计算结果入栈
3、最后栈顶上的元素就是表达式的结果值
对于中缀（正常）表达式和后缀表达式，运算数的相对顺序不变，而运算符号的顺序改变，这就需要存储“等待中”的运算符号，要将当前运算符号与“等待中”的最后一个运算符号比较

如a*(b+c)/d即abc+*d/
输入对象：a  *
把*放入栈内 ,把a输出
输入对象：（ 
括号的优先级高，把（放入栈内，当（在栈内时，它的优先级就降为所有运算符中最低的
输入对象：b +
+优先级高，把+放入栈内，把b输出
输入对象：c )
碰到）时，就把栈内的运算符一个一个抛出来，直至遇到（
此时式子为 a b c +      ()省略不写
输入对象：/
当运算符同级时，在左面的运算符优先级高，则这里/的优先级低，则*出来，/进入栈
输入对象：d
d输出，式子结束，把栈内运算符输出
最后式子为a b c + * d /

中缀->后缀方法总结：
1、运算数:直接输出
2、左括号:压入堆栈
3、右括号: 将栈顶的运算符弹出并输出，直到遇到左括号(出栈，不输出即省略不写)
4、运算符:若此运算符优先级大于栈顶运算符时，则把它压入栈；若此运算符优先级小于等于栈顶运算符时，将栈顶运算符弹出并输出，再比较新的栈顶运算符，直到该运算符大于栈顶运算符优先级为止，然后将该运算符压入栈
5、若各对象处理完毕，则把堆栈中存留的运算符一并输出








