二叉树：一个有穷的结点集合，这个集合可以为空，若不为空，则它是由根节点和被称为左子树Tl和右子树Tr的两个不相交的二叉树组成。共有5种形态：空、只有一个节点、左子树为空、右子树为空、左右子树都有（都不为空）。二叉树的子树有左右顺序之分。

特殊二叉树：
1斜二叉树：只有左儿子或者只有右儿子，就相当于一个链表
2完美二叉树（满二叉树）：每个节点都有两个儿子（除了最底层的叶节点），且层数n与该层内结点数N满足：N=2^(n-1) 即都是1->2->4->8.....这种
3完全二叉树：有n个节点的二叉树，对树中节点按从上至下、从左至右的顺序编号，编号为i的节点与满二叉树中编号为i的节点在二叉树中的位置相同，即它的倒数第二层往上与完美二叉树相同，最后一层中允许缺最右面开始往左的多个节点，但最左面与完美二叉树对齐

二叉树的性质：
1、一个二叉树的第i层的最多节点数为2^(i-1)   i>=1
2、深度为k的二叉树有最多节点总数为2^k-1(完美二叉树）    k>=1
3、对任何非空二叉树，若n0表示叶节点个数，n2是度为2的非叶节点个数，则n0=n2+1
因为总边数=总节点数(n0+n1+n2)-1,其中n0的节点往下没有边,n1的节点有1条,n2的节点有2条
即n0+n1+n2-1=0*n0+1*n1+2*n2，可得上述关系

二叉树的遍历是树操作里面最主要的操作，常用的遍历方法有
1、先序：根、左子树、右子树
2、中序：左子树、根、右子树
3、后序：左子树、右子树、根
4、层次遍历：从上到下、从左到右

二叉树的存储结构
1、顺序存储结构：由于二叉树的分支少（只有两个）所以可以用数组实现，最适合的树就是完全二叉树，按从上至下、从左至右的顺序存储（1->9）
                  1
                             ↙↘
                          2         3
                        ↙↘     ↙↘
                     4      5     6    7
                   ↙↘
                  8    9
对任一非根节点，其父结点的序号是i/2
i节点的左儿子序号是2i，右儿子的序号是2i+1；2i<=n时有左儿子，2i+1<=n时有右儿子（n为节点总数）
对于一般的二叉树，也可以用数组实现，但需要对其进行补充，使其称为完全二叉树，造成空间浪费
                  1
                             ↙↘
                          2         3
                        ↙↘     ↙↘
                      N    N     6    N
                   ↙↘↙↘  ↙↘
                   N  N N   N  N   13
2、链表存储：每个节点有三个元素，一个是数据，另外两个是左指针和右指针
struct tree_node
{
	int data;
	struct tree_node* left;
	struct tree_node* right;
};

二叉树的遍历：
1、先序遍历：访问根节点->遍历其左子树->遍历其右子树
void pre_order_traversal(struct tree_node* root)
{
	if (root != NULL)
	{
		printf("%d", root->data);
		pre_order_traversal(root->left);
		pre_order_traversal(root->right);
	}
}
对于这样的一棵二叉树：
                              1
                             ↙↘
                          2      3
                        ↙↘     ↙↘
                       4  5    6  7
                          ↙      ↘         
                         8         9
先序遍历输出 1 2458 3697，对于每个节点，先输出它自己，然后把它左边的那个数输出，左边的整个分支输出完后再往右看
2、中序遍历：遍历其左子树->访问根节点->遍历其右子树
void in_order_traversal(struct tree_node* root)
{
	if (root != NULL)
	{
		in_order_traversal(root->left);
		printf("%d", root->data);
		in_order_traversal(root->right);
	}
}
对上面的那棵树，中序遍历输出 4285 1 6937，对于每个节点，先输出它左边的数，再输出它自己，最后输出右边的数
3、后序遍历：遍历其左子树->遍历其右子树->访问根节点
void post_order_traversal(struct tree_node* root)
{
	if (root != NULL)
	{
		post_order_traversal(root->left);
		post_order_traversal(root->right);
		printf("%d", root->data);
	}	
}
对上面的那棵树，后序遍历输出4852 9673 1，对于每个节点，先输出它左边的数，再输出右边的数输出，最后它自己

对于先中后序遍历，它们过程中经过节点的路径一样，只是访问(printf)各节点的时机不同。都是用递归进行实现
4、中序的非递归遍历：
非递归算法实现的基本思路：使用堆栈
遇到一个节点，就把它压入栈中，并遍历它的左子树，当左子树遍历结束后，从栈顶抛出这个节点并printf它，然后按其右指针再去中序遍历该节点的右子树
void de_in_order_traversal(struct tree_node* root)
{
	struct tree_node* p = root;//辅助指针变量
	stack<tree_node*> s;
	while (p != NULL || !s.empty()) //当p为空且栈也空时退出循环
	{
		while (p != NULL)//遍历左子树，一直向左并将沿途节点压入栈中
		{
			s.push(p);
			p = p->left;  //让p指向p节点的左儿子
		}
		if (!s.empty())
		{
			printf("%5d", s.top()->data);//打印栈顶节点
			p = s.top();
			s.pop();  //抛出该节点
			p = p->right;//p指向原栈顶节点的右节点（转向右子树）
		}
	}
}
先序的非递归就是把大循环里改成
		while (p != NULL)
		{
			printf("%5d", s.top()->data);
			s.push(p);
			p = p->left;
		}
		if (!s.empty())
		{
			p = s.top();
			s.pop(); 
			p = p->right;
		}
二叉树的遍历本质上是把二维结构变成一维进行展示，核心问题是二维结构的线性化--从节点访问其左右儿子节点，访问左儿子后，对于右儿子，需要一个存储结构（堆栈、队列）来保存暂时不访问的节点
5、层序遍历：遍历从根节点开始，首先将根节点放入队列，然后开始执行循环：节点出队、访问（printf）该节点、其左右儿子入队
                              1
                             ↙↘
                          2      3
                        ↙↘     ↙↘
                       4  5    6  7
                          ↙    ↘         
                         8       9

把1放入队列，把1输出（同时从队列中抛出），把2、3放入队列
把2输出，把4、5放入队列
把3输出，把6、7放入队列
把4输出，把5输出，把8放入队列
把6输出，把9放入队列
把7输出，把8输出，把9输出
这种方法的特点是一层一层访问二叉树
void level_order_travelsal(struct tree_node* root)
{
	queue<struct tree_node*> q;
	struct tree_node* p;
	if (root == NULL)
		return;
	q.push(root);
	while (!q.empty())
	{
		p = q.front();
		printf("%d", p->data);
		q.pop();//删除q.front()
		if (p->left != NULL) q.push(p->left);
		if (p->right != NULL) q.push(p->right);
	}
}












